from fastapi import APIRouter, HTTPException, Depends, status
from fastapi.security import HTTPAuthorizationCredentials
from supabase import Client
from datetime import timedelta, datetime
from typing import Optional
import traceback

from app.models.security import (
    UserLogin, UserRegister, Token, SecurityUtils, 
    get_current_user, get_current_active_user, TokenData
)
from app.schemas.chat import User
from app.config.database import get_supabase

router = APIRouter(prefix="/auth", tags=["authentication"])

@router.post("/register", response_model=dict)
async def register(user_data: UserRegister, db: Client = Depends(get_supabase)):
    """
    ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
    - Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    - Hash password
    - T·∫°o user m·ªõi trong database
    """
    try:
        # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
        existing_user = db.table("users").select("email").eq("email", user_data.email).execute()
        print(existing_user.data)
        if existing_user.data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"
            )
        
        # Hash password
        hashed_password = SecurityUtils.hash_password(user_data.password)
        
        # T·∫°o user m·ªõi
        result = db.table("users").insert({
            "email": user_data.email,
            "password_hash": hashed_password,
            "full_name": user_data.full_name,
            "is_active": True
        }).execute()
        
        if not result.data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n"
            )
        
        return {"message": "ƒêƒÉng k√Ω th√†nh c√¥ng", "user_id": result.data[0]["id"]}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói ƒëƒÉng k√Ω: {str(e)}"
        )

@router.post("/login", response_model=Token)
async def login(user_credentials: UserLogin, db: Client = Depends(get_supabase)):
    """
    ƒêƒÉng nh·∫≠p v√† t·∫°o JWT token
    - Ki·ªÉm tra email v√† password
    - T·∫°o access token
    """
    try:
        # L·∫•y user t·ª´ database
        result = db.table("users").select("*").eq("email", user_credentials.email).execute()
        
        if not result.data:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
            )
        
        user = result.data[0]
        
        # Ki·ªÉm tra password
        if not SecurityUtils.verify_password(user_credentials.password, user["password_hash"]):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
            )
        
        # Ki·ªÉm tra user c√≥ active kh√¥ng
        if not user.get("is_active", True):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a"
            )
        
        # T·∫°o access token
        access_token_expires = timedelta(minutes=SecurityUtils.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = SecurityUtils.create_access_token(
            data={"sub": user["id"], "email": user["email"]},
            expires_delta=access_token_expires
        )
        
        # C·∫≠p nh·∫≠t last_login
        db.table("users").update({"last_login": datetime.utcnow().isoformat()}).eq("id", user["id"]).execute()
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            expires_in=SecurityUtils.ACCESS_TOKEN_EXPIRE_MINUTES * 60
        )
        
    except HTTPException:
        raise
    except Exception as e:
        # raise HTTPException(
        #     status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        #     detail=f"L·ªói ƒëƒÉng nh·∫≠p: {str(e)}"
        # )
        print("üö® L·ªói ƒëƒÉng nh·∫≠p - Stack trace:")
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói n·ªôi b·ªô: {str(e)}"
        )

@router.get("/me", response_model=User)
async def get_current_user_info(
    current_user: TokenData = Depends(get_current_active_user),
    db: Client = Depends(get_supabase)
):
    """
    L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ token
    """
    try:
        result = db.table("users").select("*").eq("id", current_user.user_id).execute()
        
        if not result.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin user"
            )
        
        user_data = result.data[0]
        return User(**user_data)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói l·∫•y th√¥ng tin user: {str(e)}"
        )

@router.post("/refresh", response_model=Token)
async def refresh_token(current_user: TokenData = Depends(get_current_user)):
    """
    L√†m m·ªõi token
    """
    try:
        access_token_expires = timedelta(minutes=SecurityUtils.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = SecurityUtils.create_access_token(
            data={"sub": current_user.user_id, "email": current_user.email},
            expires_delta=access_token_expires
        )
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            expires_in=SecurityUtils.ACCESS_TOKEN_EXPIRE_MINUTES * 60
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói l√†m m·ªõi token: {str(e)}"
        )

@router.post("/logout")
async def logout(current_user: TokenData = Depends(get_current_active_user)):
    """
    ƒêƒÉng xu·∫•t (trong th·ª±c t·∫ø, JWT token s·∫Ω h·∫øt h·∫°n t·ª± ƒë·ªông)
    C√≥ th·ªÉ implement blacklist token n·∫øu c·∫ßn
    """
    return {"message": "ƒêƒÉng xu·∫•t th√†nh c√¥ng"}